const crypto = require("crypto");
const requests = require("./utils/requests.js");

class payment {
  constructor(access_token) {
    this.access_token = "Bearer " + access_token;
    this.user_id = null;
    this.payment_id = null;
    this.user_name = null;
    this.value = null;
  }

  async expire_date(time) {
    this.date = new Date();
    this.date.setMinutes(this.date.getMinutes() + 30);
    this.sum_time = time * 60;
    this.max_time = new Date(this.date.getTime() + this.sum_time * 1000 - this.date.getTimezoneOffset() * 60000);
    return this.max_time.toISOString().slice(0, -1) + "-10:00";
  }

  async create_payment(value, time = 30) {
    this.expire = await this.expire_date(time);

    // Gera um valor Ãºnico para X-Idempotency-Key
    const idempotencyKey = crypto.randomBytes(16).toString("hex");

    this.response = await requests.requests({
      method: "POST",
      uri: "https://api.mercadopago.com/v1/payments",
      headers: {
        Authorization: this.access_token,
        "X-Idempotency-Key": idempotencyKey
      },
      json: {
        transaction_amount: parseFloat(value),
        description: "Compras na laura privat pelo: " + gmail,
        payment_method_id: "pix",
        payer: {
          email: "pedro137553@gmail.com",
          identification: { type: "CPF", number: "08732837160" },
          address: {}
        },
        date_of_expiration: this.expire
      }
    });

    console.log("API Response:", this.response.res.body);

    if (this.response.res.body && this.response.res.body.id) {
      this.payment = this.response.res.body;
      this.payment_id = this.payment.id.toString();

      return {
        payment_id: this.payment_id,
        copy_paste: this.payment.point_of_interaction.transaction_data.qr_code,
        qr_code: this.payment.point_of_interaction.transaction_data.qr_code_base64,
        ticket_url: this.payment.point_of_interaction.transaction_data.ticket_url
      };
    } else {
      throw new Error("Erro ao criar o pagamento. Resposta da API: " + JSON.stringify(this.response.res.body));
    }
  }

  async check_payment() {
    this.response = await requests.requests({
      method: "GET",
      uri: "https://api.mercadopago.com/v1/payments/" + this.payment_id,
      headers: {
        Authorization: this.access_token
      }
    });
    this.get_pay = JSON.parse(this.response.res.body);

    return { status: this.get_pay.status };
  }
}

module.exports = { payment };
